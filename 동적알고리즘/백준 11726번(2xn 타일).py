# 2*n의 타일이 주어졌을 때
# 2*1, 1*2의 타일로 2*n의 타일을 가득 채울 수 있는 방법의 수
# 예제 입력 2 ==> 예제 출력 2
# 예제 입력 9 ==> 예제 출력 55

# 동적 프로그래밍 사용
# 규칙 그려서 찾음
# 입력 1 -> 1, 입력 2 -> 2, 입력 3 -> 3(입력1+입력2) 입력 4 -> 5(입력2+입력3)
# 규칙 입력 n == > 입력(n-1)+입력(n-2)
# 초기값은 입력 1,2 (3부턴 입력1+입력2로 만들어지니까)
# 초기배열 [1,2] 사용

'''
tile 함수(N을 값으로 받음)
    초기배열=[1,2]
    if N>=2 -> (인덱스는 0부터 시작이니까) 0~1은 초기값으로 사용
        for 2부터 N까지
            배열.더하기(배열(이전 항목)+배열(이이전 항목))

    반환 배열[N-1] -> (배열의 인덱스는 0부터 시작이니까)

n = 숫자입력받기
출력(tile(n)%10007) -> 10007로 나눈 나머지는 문제에서 제시된 값
'''

def tile(N):
    fir_tile=[1,2]
    if N>=2:
        for i in range(2,N+1):
            fir_tile.append(fir_tile[i-1]+fir_tile[i-2])

    return fir_tile[N-1]

n=int(input())

print(tile(n)%10007)